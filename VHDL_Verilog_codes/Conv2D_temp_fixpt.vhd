-- -------------------------------------------------------------
-- 
-- File Name: S:\s1bits\lecture slides\Sem3-2 2019-2020\DOP\codegen\Conv2D_temp\hdlsrc\Conv2D_temp_fixpt.vhd
-- Created: 2020-05-03 19:34:36
-- 
-- Generated by MATLAB 9.6, MATLAB Coder 4.2 and HDL Coder 3.14
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Conv2D_temp_fixpt
-- Source Path: Conv2D_temp_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Conv2D_temp_fixpt_pkg.ALL;

ENTITY Conv2D_temp_fixpt IS
  PORT( X                                 :   IN    vector_of_std_logic_vector14(0 TO 783);  -- ufix14_En13 [784]
        K                                 :   IN    vector_of_std_logic_vector14(0 TO 287);  -- sfix14_En13 [288]
        B                                 :   IN    vector_of_std_logic_vector14(0 TO 31);  -- sfix14_En16 [32]
        Conv2D_output                     :   OUT   vector_of_std_logic_vector14(0 TO 21631)  -- sfix14_En13 [21632]
        );
END Conv2D_temp_fixpt;


ARCHITECTURE rtl OF Conv2D_temp_fixpt IS

  -- Signals
  SIGNAL X_unsigned                       : vector_of_unsigned14(0 TO 783);  -- ufix14_En13 [784]
  SIGNAL K_signed                         : vector_of_signed14(0 TO 287);  -- sfix14_En13 [288]
  SIGNAL B_signed                         : vector_of_signed14(0 TO 31);  -- sfix14_En16 [32]
  SIGNAL Conv2D_output_tmp                : vector_of_signed14(0 TO 21631);  -- sfix14_En13 [21632]

BEGIN
  outputgen3: FOR k2 IN 0 TO 783 GENERATE
    X_unsigned(k2) <= unsigned(X(k2));
  END GENERATE;

  outputgen2: FOR k2 IN 0 TO 287 GENERATE
    K_signed(k2) <= signed(K(k2));
  END GENERATE;

  outputgen1: FOR k2 IN 0 TO 31 GENERATE
    B_signed(k2) <= signed(B(k2));
  END GENERATE;

  Conv2D_temp_fixpt_1_output : PROCESS (B_signed, K_signed, X_unsigned)
    VARIABLE step1 : vector_of_signed14(0 TO 21631);
    VARIABLE Conv2D_output1 : vector_of_signed14(0 TO 21631);
    VARIABLE temp2 : vector_of_signed14(0 TO 8);
    VARIABLE s : signed(15 DOWNTO 0);
    VARIABLE ix : signed(31 DOWNTO 0);
    VARIABLE iy : signed(31 DOWNTO 0);
    VARIABLE Y : signed(17 DOWNTO 0);
    VARIABLE y_0 : vector_of_signed16(0 TO 2);
    VARIABLE cast : vector_of_signed15(0 TO 8);
    VARIABLE cast_0 : vector_of_signed15(0 TO 2);
    VARIABLE add_cast : vector_of_signed64(0 TO 2);
    VARIABLE mul_temp : vector_of_signed29(0 TO 2);
    VARIABLE cast_1 : vector_of_signed28(0 TO 2);
    VARIABLE add_cast_0 : vector_of_signed18(0 TO 25);
    VARIABLE add_cast_1 : vector_of_signed14(0 TO 25);
    VARIABLE add_cast_2 : vector_of_signed18(0 TO 25);
    VARIABLE add_temp : vector_of_signed18(0 TO 25);
    VARIABLE add_cast_3 : vector_of_signed19(0 TO 1);
    VARIABLE add_cast_4 : vector_of_signed19(0 TO 1);
    VARIABLE add_temp_0 : vector_of_signed19(0 TO 1);
    VARIABLE add_cast_5 : vector_of_signed17(0 TO 1);
    VARIABLE add_cast_6 : vector_of_signed17(0 TO 1);
    VARIABLE add_temp_1 : vector_of_signed17(0 TO 1);
  BEGIN
    --HDL code generation from MATLAB function: Conv2D_temp_fixpt
    --21632
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --                                                                          %
    --           Generated by MATLAB 9.6 and Fixed-Point Designer 6.3           %
    --                                                                          %
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --img_size=size(input_img);
    --size_of_img_size=size(img_size);
    --kernel_size=size(kernel);
    --bias_size=size(bias);
    --input_img=zeros([1,28,28]);
    --kernel=zeros([32,1,3,3]);
    --bias=zeros([32,1]);
    --size_of_img_size=[1,3];
    --Conv2D_output=zeros(output_size(1),output_size(2),output_size(3),output_size(4));
    --temp_sum=zeros(kernel_size(3),kernel_size(4));
    --temp_kernel=zeros([kernel_size(3),kernel_size(4)]);
    y_0 := (OTHERS => to_signed(16#0000#, 16));

    FOR channel_no IN 0 TO 31 LOOP
      FOR i_0 IN 0 TO 25 LOOP
        FOR j IN 0 TO 25 LOOP

          FOR t_1 IN 0 TO 2 LOOP
            FOR t_0 IN 0 TO 2 LOOP
              cast_0(t_0) := signed(resize(X_unsigned((t_0 + i_0) + (28 * (t_1 + j))), 15));
              add_cast(t_0) := resize(to_signed(t_1, 32) & '0' & '0' & '0' & '0' & '0', 64);
              mul_temp(t_0) := cast_0(t_0) * K_signed(to_integer((to_signed(channel_no, 32) + resize(add_cast(t_0), 32)) + to_signed(96 * t_0, 32)));
              cast_1(t_0) := mul_temp(t_0)(27 DOWNTO 0);
              temp2(t_0 + (3 * t_1)) := cast_1(t_0)(26 DOWNTO 13);
            END LOOP;
          END LOOP;

          ix := to_signed(16#00000000#, 32);
          iy := to_signed(16#00000000#, 32);

          FOR i IN 0 TO 2 LOOP
            s := resize(temp2(to_integer(ix)), 16);
            ix := ix + 1;

            FOR k1 IN 0 TO 1 LOOP
              add_cast_5(k1) := resize(s, 17);
              add_cast_6(k1) := resize(temp2(to_integer(ix)), 17);
              add_temp_1(k1) := add_cast_5(k1) + add_cast_6(k1);
              s := add_temp_1(k1)(15 DOWNTO 0);
              ix := ix + 1;
            END LOOP;

            y_0(to_integer(iy)) := s;
            iy := iy + 1;
          END LOOP;

          Y := resize(y_0(0), 18);

          FOR k_0 IN 0 TO 1 LOOP
            add_cast_3(k_0) := resize(Y, 19);
            add_cast_4(k_0) := resize(y_0(k_0 + 1), 19);
            add_temp_0(k_0) := add_cast_3(k_0) + add_cast_4(k_0);
            Y := add_temp_0(k_0)(17 DOWNTO 0);
          END LOOP;

          add_cast_0(j) := resize(B_signed(channel_no), 18);
          add_cast_1(j) := Y(13 DOWNTO 0);
          add_cast_2(j) := resize(add_cast_1(j) & '0' & '0' & '0', 18);
          add_temp(j) := add_cast_0(j) + add_cast_2(j);
          step1((i_0 + (26 * j)) + (676 * channel_no)) := add_temp(j)(16 DOWNTO 3);
        END LOOP;
      END LOOP;
    END LOOP;

    --Conv2D_output=temp_sum;%reshape(temp2,[1,9]);
    Conv2D_output1 := step1;

    FOR i_1 IN 0 TO 8 LOOP
      cast(i_1) := resize(Conv2D_output1(i_1), 15);
      IF cast(i_1) < to_signed(16#0000#, 15) THEN 
        Conv2D_output1(i_1) := to_signed(16#0000#, 14);
      END IF;
    END LOOP;

    Conv2D_output_tmp <= Conv2D_output1;
  END PROCESS Conv2D_temp_fixpt_1_output;


  outputgen: FOR k2 IN 0 TO 21631 GENERATE
    Conv2D_output(k2) <= std_logic_vector(Conv2D_output_tmp(k2));
  END GENERATE;

END rtl;

